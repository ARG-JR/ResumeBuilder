# DEVELOPMENT ENVIRONMENT
# use the latest version of the docker-compose syntax

version: '3.9'

# List of all services for the development environment
# things like the actual app, the database, the proxy, 
# and any other software the app needs to run go here

services:
  # Our django app
  app:
    # what working directory to use
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    command: sh -c "wait-for ${DB_HOST:-database}:${DB_PORT:-3306} -t 5000 -- python manage.py migrate && python manage.py collectstatic --noinput && gunicorn --log-file - --bind 0.0.0.0:${APP_PORT:-8000} core.wsgi"
    ports:
      # first port is the one that the server listens to inside the container, 
      # second one is the port that you wish to use when connecting to the server in the container.
      - ${APP_PORT:-8000}:${APP_PORT:-8000}
    volumes:
      # mounts the current folder from our system into the container as /app
      - ./app:/app:rw
      - /etc/passwd:/etc/passwd:ro
    env_file: 
      - ./.env
    environment:
      # These are the environment variables that get read into settings.py
      # The funny parts are how docker reads it from the .env file so we don't have to repeat it in this file and the python code
      - SECRET_KEY=${SECRET_KEY:-devsecret}
      - DEBUG=${DEBUG:-0}
      - DB_HOST=${DB_HOST:-database}
      - DB_NAME=${DB_NAME:-dev}
      - DB_USER=${DB_USER:-myapp}
      - DB_PASS=${DB_PASS:-mypassword}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.service=app@docker"
      - "traefik.http.services.app.loadbalancer.server.port=${APP_PORT:-8000}"
      - "traefik.http.routers.app.rule=Host(`${APP_DOMAIN:-dev.subspacedev.io}`)"
      - "traefik.http.routers.app.entrypoints=web-secure"
      - "traefik.http.routers.app.tls.certresolver=le-ssl"
      - "traefik.docker.network=traefik"
    depends_on:
      # tells docker that our app should start after the database
      # can't connect to a database if it isn't running lol
      - database
    networks:
      - traefik

  database:
    # Pull the existing docker image from the docker repo instead of building a new one
    image: mariadb
    ports: 
      # database runs on port 3306
      - ${DB_PORT:-3306}:${DB_PORT:-3306}
    volumes:
      # Mount the database storage dir to a dir on our machine so it doesn't get wiped every time it boots
      - db-data:/var/lib/mysql
    environment:
      # Pre-configured root password, new database, user for the database, and password for the user
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-somerootpass}
      - MYSQL_DATABASE=${DB_NAME:-dev}
      - MYSQL_USER=${DB_USER:-myapp}
      - MYSQL_PASSWORD=${DB_PASS:-mypassword}
    networks:
      - traefik

  traefik:
    image: traefik
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--log.level=DEBUG"

      - "--providers.docker"
      - "--providers.docker.watch"
      - "--providers.docker.exposedByDefault=false"

      - "--entrypoints.web.address=:${PROXY_HTTP_PORT:-80}"
      - "--entrypoints.web-secure.address=:${PROXY_HTTPS_PORT:-443}"

      - "--entrypoints.web-secure.http.tls=true"
      - "--entrypoints.web-secure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.web-secure.http.tls.domains[0].main=subspacedev.io"
      - "--entrypoints.web-secure.http.tls.domains[0].sans=*.subspacedev.io"

      - "--certificatesresolvers.le-ssl.acme.tlsChallenge=true"
      - "--certificatesResolvers.le-ssl.acme.email=${SSL_EMAIL-:alex.garza5@outlook.com}"
      - "--certificatesResolvers.le-ssl.acme.storage=/letsencrypt/acme.json"
    networks:
      - traefik
      - inbound
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-data:/letsencrypt/
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.traefik.rule=Host(`${PROXY_HOST}`)"
    - "traefik.http.routers.traefik.service=api@internal"
    - "traefik.http.routers.traefik.tls=true"
    - "traefik.http.routers.traefik.tls.certresolver=le-ssl"
    - "traefik.http.routers.traefik.entrypoints=web-secure"
    - "traefik.http.services.traefik.loadbalancer.server.port=888"
    - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
    - "traefik.http.routers.http-catchall.entrypoints=web"
    - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
    - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

volumes:
  db-data: {}
  traefik-data: {}

networks:
  traefik: {}
  inbound: {}
